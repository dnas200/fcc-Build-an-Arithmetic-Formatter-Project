def arithmetic_arranger(problems, show_answers=False):
    my_List = [problem.split() for problem in problems]

    # Error handling
    if len(problems) > 5:
        return 'Error: Too many problems.'

    for problem in my_List:
        if not (problem[0].isdigit() and problem[2].isdigit()):
            return 'Error: Numbers must only contain digits.'
        if len(problem[0]) > 4 or len(problem[2]) > 4:
            return 'Error: Numbers cannot be more than four digits.'
        if problem[1] not in ['+', '-']:
            return "Error: Operator must be '+' or '-'."
    
    # Preparing output lines
    line1 = []
    line2 = []
    line3 = []
    line4 = []

    for problem in my_List:
        num1, operator, num2 = problem
        width = max(len(num1), len(num2)) + 2  # Determine spacing width
        line1.append(num1.rjust(width))
        line2.append(operator + " " + num2.rjust(width - 2))
        line3.append("-" * width)
        if show_answers:
            result = str(eval(num1 + operator + num2)).rjust(width)
            line4.append(result)

    # Joining all parts with correct spacing
    arranged_problems = (
        "    ".join(line1) + "\n" +
        "    ".join(line2) + "\n" +
        "    ".join(line3)
    )

    if show_answers:
        arranged_problems += "\n" + "    ".join(line4)

    return arranged_problems

arithmetic_arranger(["32 + 8", "1 - 3801", "9999 + 9999", "523 - 49"], True)

print(f'\n{arithmetic_arranger(["32 + 698", "3801 - 2", "45 + 43", "123 + 49"], True)}')

print(f'\n{arithmetic_arranger(["32 + 698", "3801 - 2", "45 + 43", "123 + 49"])}')
